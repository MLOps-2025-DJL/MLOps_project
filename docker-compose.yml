services:
  base-image:
    build:
      context: .
      dockerfile: Dockerfile.base
    networks:
      - backend

  # PostgreSQL
  postgres:
    image: postgres:15
    env_file: .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - backend

  # MinIO
  minio:
    image: minio/minio:latest
    env_file: .env
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_CONSOLE_PORT=${MINIO_CONSOLE_PORT}
    ports:
      - "9000:9000"
      - "${MINIO_CONSOLE_PORT}:9003"
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    restart: always
    networks:
      - backend

  # MinIO Client
  minio-client:
    image: minio/mc:latest
    env_file: .env
    depends_on:
      - minio
    entrypoint: >
      /bin/sh -c "
      sleep 10 &&
      mc config host add myminio ${MLFLOW_S3_ENDPOINT_URL} ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      mc mb -p myminio/models || true &&
      mc mb -p myminio/data || true
      "
    networks:
      - backend

  # API
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    volumes:
      - ./src/api:/app
    ports:
      - "8000:8000"
    env_file: .env
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_TRACKING_URI=${MLFLOW_API}
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always
    networks:
      - backend

  # Gradio 
  webapp:
    build:
      context: .
      dockerfile: Dockerfile.webapp
    ports:
      - "7860:7860"
    volumes:
    #only for development
      - ./src/webapp:/app
    command: python /app/web.py
    restart: always
    networks:
      - backend
  # MLflow
  mlflow:
    build:
      context: .
      dockerfile: Dockerfile.mlflow
    env_file: .env
    ports:
      - "5001:5001"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_TRACKING_URI=${MLFLOW_TRACKING_URI}
    command: >
      mlflow server
      --backend-store-uri ${MLFLOW_TRACKING_URI}
      --default-artifact-root ${MLFLOW_ARTIFACT_ROOT}
      --host 0.0.0.0
      --port 5001
    depends_on:
      - postgres
      - minio
    restart: always
    networks:
      - backend

  # Airflow Services
  airflow-init-dirs:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    user: root
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts:/opt/airflow/scripts
    entrypoint: /bin/bash
    command: -c "mkdir -p /opt/airflow/dags /opt/airflow/logs/scheduler /opt/airflow/logs/webserver /opt/airflow/plugins /opt/airflow/scripts /opt/airflow/data && chmod -R 777 /opt/airflow/logs /opt/airflow/dags /opt/airflow/plugins /opt/airflow/scripts"
    networks:
      - backend

  airflow-webserver:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    env_file: .env
    depends_on:
      - postgres
      - airflow-init-dirs
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__LOAD__EXAMPLES=${AIRFLOW__CORE__LOAD_EXAMPLES}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW_HOME=/opt/airflow
      - MLFLOW_TRACKING_URI=${MLFLOW_API}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts:/opt/airflow/scripts
    ports:
      - "8088:8080"
    command: webserver
    restart: always
    networks:
      - backend

  airflow-scheduler:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    env_file: .env
    depends_on:
      - postgres
      - airflow-init-dirs
      - airflow-webserver
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW__CORE__LOAD_EXAMPLES}
      - AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=False
      - AIRFLOW_HOME=/opt/airflow
      - MLFLOW_TRACKING_URI=${MLFLOW_API}
      - MLFLOW_S3_ENDPOINT_URL=${MLFLOW_S3_ENDPOINT_URL}
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/scripts:/opt/airflow/scripts
    command: scheduler
    restart: always
    networks:
      - backend

  airflow-init:
    build:
      context: .
      dockerfile: Dockerfile.airflow
    env_file: .env
    depends_on:
      - postgres
      - airflow-init-dirs
    environment:
      - AIRFLOW__CORE__EXECUTOR=${AIRFLOW__CORE__EXECUTOR}
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      - AIRFLOW__CORE__LOAD_EXAMPLES=${AIRFLOW__CORE__LOAD_EXAMPLES}
      - AIRFLOW__WEBSERVER__RBAC=True
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
    entrypoint: /bin/bash
    command: -c "airflow db init && airflow users create --username ${AIRFLOW_USER} --password ${AIRFLOW_PASS} --firstname ${AIRFLOW_FIRST_NAME} --lastname ${AIRFLOW_LAST_NAME} --role ${AIRFLOW_ROLE} --email ${AIRFLOW_EMAIL}"
    networks:
      - backend

volumes:
  postgres-db-volume:
  minio-data:

networks:
  backend: